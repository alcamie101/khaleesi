- builder:
    name: builder-tripleo-khaleesi
    builders:
        - shining-panda:
            build-environment: virtualenv
            python-version: system-CPython-2.7
            nature: shell
            clear: false
            use-distribute: true
            system-site-packages: false
            ignore-exit-code: false
            command: |
                pip install -U ansible==1.9.2 > ansible_build; ansible --version

                # install ksgen
                pushd khaleesi/tools/ksgen
                python setup.py install
                popd

                pushd khaleesi

                cp ansible.cfg.example ansible.cfg
                touch ssh.config.ansible
                echo "" >> ansible.cfg
                echo "[ssh_connection]" >> ansible.cfg
                echo "ssh_args = -F ssh.config.ansible" >> ansible.cfg

                # fetch dependent gating changes
                if [ $GERRIT_CHANGE_COMMIT_MESSAGE ]; then
                    ansible-playbook -i local_hosts -vv playbooks/depends-on-repo.yml
                fi

                # generate config
                ksgen --config-dir=settings generate \
                    --provisioner=centosci \
                    --provisioner-site=default \
                    --provisioner-distro=centos \
                    --provisioner-distro-version={provisioner-distro-version} \
                    --provisioner-site-user=rdo \
                    --product={product} \
                    --product-version={product-version} \
                    --product-version-build={pin} \
                    --product-version-repo={product-version-repo} \
                    --distro={distro} \
                    --installer={installer} \
                    --installer-deploy={installer-deploy} \
                    --installer-env={installer-env} \
                    --installer-images={installer-images} \
                    --installer-network={network} \
                    --installer-network-isolation={network-isolation} \
                    --installer-network-variant={network-variant} \
                    --installer-post_action={installer-post_action} \
                    --installer-topology={installer-topology} \
                    --installer-tempest={installer-tempest} \
                    --installer-tempest_skip_file=rdoci-{product}-{product-version}-{installer} \
                    --logs=gzip \
                    --logs-site=centosci \
                    --workarounds=enabled \
                    --extra-vars @../khaleesi-settings/hardware_environments/virt/network_configs/{network-isolation}/hw_settings.yml \
                    ksgen_settings.yml

                # get nodes and run test
                set +e
                anscmd="stdbuf -oL -eL ansible-playbook -vv --extra-vars @ksgen_settings.yml"

                $anscmd -i local_hosts playbooks/full-job-no-test.yml
                result=$?
                if [[ "$result" = "0" ]]; then
                    $anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-virt-fencing.yml
                    result=$?
                fi

                if [[ "$result" = "0" ]]; then
                    $anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-test.yml
                    result=$?
                fi

                infra_result=0
                $anscmd -i hosts playbooks/collect_logs.yml &> collect_logs.txt || infra_result=1
                $anscmd -i local_hosts playbooks/cleanup.yml &> cleanup.txt || infra_result=2

                if [[ "$infra_result" != "0" && "$result" = "0" ]]; then
                    # if the job/test was ok, but collect_logs/cleanup failed,
                    # print out why the job is going to be marked as failed
                    result=$infra_result
                    cat collect_logs.txt
                    cat cleanup.txt
                fi

                exit $result

- builder:
    name: builder-tripleo-khaleesi-upstream-gates
    builders:
        - shining-panda:
            build-environment: virtualenv
            python-version: system-CPython-2.7
            nature: shell
            clear: false
            use-distribute: true
            system-site-packages: false
            ignore-exit-code: false
            command: |
                pip install -U ansible==1.9.2 > ansible_build; ansible --version

                # install ksgen
                pushd khaleesi/tools/ksgen
                python setup.py install
                popd

                pushd khaleesi

                cp ansible.cfg.example ansible.cfg
                touch ssh.config.ansible
                echo "" >> ansible.cfg
                echo "[ssh_connection]" >> ansible.cfg
                echo "ssh_args = -F ssh.config.ansible" >> ansible.cfg

                # fetch dependent gating changes
                if [ $GERRIT_CHANGE_COMMIT_MESSAGE ]; then
                    ansible-playbook -i local_hosts -vv playbooks/depends-on-repo.yml
                fi

                # generate config
                ksgen --config-dir=settings generate \
                    --provisioner=centosci \
                    --provisioner-site=default \
                    --provisioner-distro=centos \
                    --provisioner-distro-version={provisioner-distro-version} \
                    --provisioner-site-user=rdo \
                    --product={product} \
                    --product-version={product-version} \
                    --product-version-build={pin} \
                    --product-version-repo={product-version-repo} \
                    --distro={distro} \
                    --installer={installer} \
                    --installer-deploy={installer-deploy} \
                    --installer-env={installer-env} \
                    --installer-images={installer-images} \
                    --installer-network={network} \
                    --installer-network-isolation={network-isolation} \
                    --installer-network-variant={network-variant} \
                    --installer-post_action={installer-post_action} \
                    --installer-topology={installer-topology} \
                    --installer-tempest={installer-tempest} \
                    --logs=gzip \
                    --logs-site=centosci \
                    --rpm=use-delorean \
                    --workarounds=enabled \
                    --extra-vars @../khaleesi-settings/hardware_environments/virt/network_configs/{network-isolation}/hw_settings.yml \
                    ksgen_settings.yml

                # get nodes and run test
                set +e
                anscmd="stdbuf -oL -eL ansible-playbook -vv --extra-vars @ksgen_settings.yml"

                $anscmd -i local_hosts playbooks/gate.yml
                result=$?

                infra_result=0
                $anscmd -i hosts playbooks/collect_logs.yml &> collect_logs.txt || infra_result=1
                $anscmd -i local_hosts playbooks/cleanup.yml &> cleanup.txt || infra_result=2

                if [[ "$infra_result" != "0" && "$result" = "0" ]]; then
                    # if the job/test was ok, but collect_logs/cleanup failed,
                    # print out why the job is going to be marked as failed
                    result=$infra_result
                    cat collect_logs.txt
                    cat cleanup.txt
                fi

                exit $result

- builder:
    name: builder-packstack-khaleesi
    builders:
        - shining-panda:
            build-environment: virtualenv
            python-version: system-CPython-2.7
            nature: shell
            clear: false
            use-distribute: true
            system-site-packages: false
            ignore-exit-code: false
            command: |
                pip install -U ansible==1.9.2 > ansible_build; ansible --version

                # install ksgen
                pushd khaleesi/tools/ksgen
                python setup.py install
                popd

                pushd khaleesi

                cp ansible.cfg.example ansible.cfg
                touch ssh.config.ansible
                echo "" >> ansible.cfg
                echo "[ssh_connection]" >> ansible.cfg
                echo "ssh_args = -F ssh.config.ansible" >> ansible.cfg

                # fetch dependent gating changes
                if [ $GERRIT_CHANGE_COMMIT_MESSAGE ]; then
                    ansible-playbook -i local_hosts -vv playbooks/depends-on-repo.yml
                fi

                # generate config
                ksgen --config-dir=settings generate \
                    --provisioner=centosci \
                    --provisioner-site=default \
                    --provisioner-distro={provisioner-distro} \
                    --provisioner-distro-version={provisioner-distro-version} \
                    --provisioner-site-user=rdo \
                    --provisioner-topology=all-in-one \
                    --product={product} \
                    --product-version={product-version} \
                    --product-version-repo={product-version-repo} \
                    --product-version-build={pin} \
                    --distro={distro} \
                    --installer={installer} \
                    --installer-network={network} \
                    --installer-messaging=none \
                    --installer-config=no_change \
                    --logs=gzip \
                    --logs-site=centosci \
                    --workarounds=enabled \
                    --extra-vars @../khaleesi-settings/hardware_environments/virt_default/hw_settings.yml \
                    ksgen_settings.yml


                # get nodes and run test
                set +e
                anscmd="stdbuf -oL -eL ansible-playbook -vv --extra-vars @ksgen_settings.yml"

                $anscmd -i local_hosts playbooks/full-job-no-test.yml
                result=$?

                if [[ $result == 0 ]]; then
                    $anscmd -i hosts playbooks/post-deploy/packstack/validate-packstack-aio.yml
                    result=$?
                fi

                infra_result=0
                $anscmd -i hosts playbooks/collect_logs.yml &> collect_logs.txt || infra_result=1
                $anscmd -i local_hosts playbooks/cleanup.yml &> cleanup.txt || infra_result=2

                if [[ "$infra_result" != "0" && "$result" = "0" ]]; then
                    # if the job/test was ok, but collect_logs/cleanup failed,
                    # print out why the job is going to be marked as failed
                    result=$infra_result
                    cat collect_logs.txt
                    cat cleanup.txt
                fi

                exit $result

- builder:
    name: builder-tripleo-khaleesi-feature
    builders:
        - shining-panda:
            build-environment: virtualenv
            python-version: system-CPython-2.7
            nature: shell
            clear: false
            use-distribute: true
            system-site-packages: false
            ignore-exit-code: false
            command: |
                pip install -U ansible==1.9.2 > ansible_build; ansible --version

                # install ksgen
                pushd khaleesi/tools/ksgen
                python setup.py install
                popd

                pushd khaleesi

                cp ansible.cfg.example ansible.cfg
                touch ssh.config.ansible
                echo "" >> ansible.cfg
                echo "[ssh_connection]" >> ansible.cfg
                echo "ssh_args = -F ssh.config.ansible" >> ansible.cfg

                # fetch dependent gating changes
                if [ $GERRIT_CHANGE_COMMIT_MESSAGE ]; then
                    ansible-playbook -i local_hosts -vv playbooks/depends-on-repo.yml
                fi

                # generate config
                ksgen --config-dir=settings generate \
                    --provisioner=centosci \
                    --provisioner-site=default \
                    --provisioner-distro=centos \
                    --provisioner-distro-version={provisioner-distro-version} \
                    --provisioner-site-user=rdo \
                    --installer={installer} \
                    --installer-deploy={installer-deploy} \
                    --installer-env={installer-env} \
                    --installer-images={installer-images} \
                    --installer-network={network} \
                    --installer-network-isolation={network-isolation} \
                    --installer-network-variant={network-variant} \
                    --installer-post_action={installer-post_action} \
                    --installer-topology={installer-topology} \
                    --installer-tempest={installer-tempest} \
                    --installer-tempest_skip_file=rdoci-{product}-{product-version}-{installer} \
                    --installer-updates={installer-updates} \
                    --distro={distro} \
                    --product={product} \
                    --product-version-build={pin} \
                    --product-version-repo={product-version-repo} \
                    --product-version={product-version} \
                    --logs=gzip \
                    --logs-site=centosci \
                    --workarounds=enabled \
                    --extra-vars @../khaleesi-settings/hardware_environments/virt/network_configs/{network-isolation}/hw_settings.yml \
                    ksgen_settings.yml

                # get nodes and run test
                set +e
                anscmd="stdbuf -oL -eL ansible-playbook -vv --extra-vars @ksgen_settings.yml"

                $anscmd -i local_hosts playbooks/full-job-no-test.yml
                result=$?

                if [[ $result == 0 ]]; then
                    pip install shyaml > shyaml_build.log
                    if [[ ` shyaml get-value installer.updates.enabled < ksgen_settings.yml` == 'True' ]]; then
                        $anscmd -i hosts playbooks/post-deploy/rdo-manager/run-update.yml
                        result=$?
                        if [[ $result == 0 ]]; then
                            $anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-validate.yml
                            result=$?
                        fi
                    elif [[ ` shyaml get-value installer.post_action < ksgen_settings.yml` == *'scale_up'* ]]; then
                        $anscmd -i hosts playbooks/post-deploy/rdo-manager/run-overcloud-scale.yml
                        result=$?
                        if [[ $result == 0 ]]; then
                            $anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-validate.yml
                            result=$?
                        fi
                        if [[ $result == 0 ]]; then
                            $anscmd -i hosts playbooks/post-deploy/rdo-manager/run-delete-nodes.yml
                            result=$?
                        fi
                        if [[ $result == 0 ]]; then
                            #$anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-validate.yml
                            #result=$?
                            echo "validation is disabled until min_basic_ops works consistently in other jobs"
                        fi
                    fi
                else
                    echo "The initial deployment was not successful"
                fi

                infra_result=0
                $anscmd -i hosts playbooks/collect_logs.yml &> collect_logs.txt || infra_result=1
                $anscmd -i local_hosts playbooks/cleanup.yml &> cleanup.txt || infra_result=2

                if [[ "$infra_result" != "0" && "$result" = "0" ]]; then
                    # if the job/test was ok, but collect_logs/cleanup failed,
                    # print out why the job is going to be marked as failed
                    #FIXME: re-enable this when collect_logs and cleanup are passing again
                    #result=$infra_result
                    cat collect_logs.txt
                    cat cleanup.txt
                fi

                exit $result

- builder:
    name: builder-tripleo-khaleesi-quickstart
    builders:
        - shining-panda:
            build-environment: virtualenv
            python-version: system-CPython-2.7
            nature: shell
            clear: false
            use-distribute: true
            system-site-packages: false
            ignore-exit-code: false
            command: |
                pip install -U ansible==1.9.2 > ansible_build; ansible --version

                #Use khaleesi to get a centosci node
                pushd khaleesi
                cp ansible.cfg.example ansible.cfg
                sed -i "s%roles_path = %roles_path = $WORKSPACE/tripleo-quickstart/playbooks/roles:playbooks/roles:%" ansible.cfg
                sed -i "s%library = %library = $WORKSPACE/tripleo-quickstart/playbooks/library:%" ansible.cfg
                echo "ssh_args = -F $PWD/ssh.config.ansible" >> ansible.cfg
                touch ssh.config.ansible

                # get config
                curl -O https://trown.fedorapeople.org/provision_centos_settings.yml
                sed -i "s%/home/rhos-ci/workspace/trown-poc-quickstart-gate-ha%$WORKSPACE%" provision_centos_settings.yml

                # get node
                set +e
                anscmd="stdbuf -oL -eL ansible-playbook -vv"
                $anscmd -i local_hosts playbooks/provision.yml --extra-vars @provision_centos_settings.yml
                # this hack allows us to use the in-tree manual provisioner so we control the hosts file
                export VIRTHOST=$(awk '/ansible_ssh_host/ {{print $2}}' $WORKSPACE/khaleesi/hosts | cut -d '=' -f2)
                popd

                echo $VIRTHOST

                # tripleo-quickstart requires Ansible 2.0
                pip uninstall -y ansible
                pip install ansible==2.0.0

                # Install tripleo-quickstart from provided jenkins scm gerrit commit ref
                pip install -e tripleo-quickstart
                pushd tripleo-quickstart
                git log -n 5 --oneline
                python setup.py install
                popd

                if [ "{installer-topology}" == "quickstart_minimal" ]; then
                    QUICKSTART_TOPOLOGY=minimal
                elif [ "{installer-topology}" == "quickstart_minimal_ha" ]; then
                    QUICKSTART_TOPOLOGY=ha
                else
                    echo "Add missing topologies to the job script"
                    exit 1
                fi

                pushd khaleesi
                ansible --version
                $anscmd -i local_hosts $WORKSPACE/tripleo-quickstart/playbooks/quickstart.yml \
                --tags "untagged,environment,provision,undercloud-scripts,undercloud-install,undercloud-post-install" \
                --extra-vars virthost=$VIRTHOST \
                --extra-vars local_working_dir=$WORKSPACE/khaleesi/ \
                --extra-vars image_url="http://artifacts.ci.centos.org/artifacts/rdo/images/{product-version}/delorean/stable/undercloud.qcow2" \
                --extra-vars @$WORKSPACE/tripleo-quickstart/playbooks/centosci/$QUICKSTART_TOPOLOGY.yml \
                --extra-vars release={product-version}

                result=$?

                pip uninstall -y ansible > ansible_uninstall
                pip install -U ansible==1.9.2 > ansible_build; ansible --version

                # install ksgen
                pushd tools/ksgen
                python setup.py install
                popd

                cp ansible.cfg.example ansible.cfg
                touch ssh.config.ansible
                echo "" >> ansible.cfg
                echo "[ssh_connection]" >> ansible.cfg
                echo "ssh_args = -F ssh.config.ansible" >> ansible.cfg

                #modify ansible hosts file to proper version
                mv hosts hosts.quickstart
                ln -s hosts.quickstart hosts
                bash -x tools/convert-ansible-inventory.sh -f 2 -t 1 -h hosts.quickstart

                # generate config
                ksgen --config-dir=settings generate \
                    --provisioner=centosci \
                    --provisioner-site=default \
                    --provisioner-distro=centos \
                    --provisioner-distro-version={provisioner-distro-version} \
                    --provisioner-site-user=rdo \
                    --product={product} \
                    --product-version={product-version} \
                    --product-version-build={pin} \
                    --product-version-repo={product-version-repo} \
                    --distro={distro} \
                    --installer={installer} \
                    --installer-deploy={installer-deploy} \
                    --installer-env={installer-env} \
                    --installer-images={installer-images} \
                    --installer-network={network} \
                    --installer-network-isolation={network-isolation} \
                    --installer-network-variant={network-variant} \
                    --installer-post_action={installer-post_action} \
                    --installer-topology={installer-topology} \
                    --installer-tempest={installer-tempest} \
                    --installer-tempest_skip_file=rdoci-{product}-{product-version}-{installer} \
                    --logs=gzip \
                    --logs-site=centosci \
                    --workarounds=enabled \
                    --extra-vars @../khaleesi-settings/hardware_environments/virt/network_configs/{network-isolation}/hw_settings.yml \
                    ksgen_settings.yml

                # get nodes and run test
                set +e
                anscmd="stdbuf -oL -eL ansible-playbook -vv --extra-vars @ksgen_settings.yml"
                $anscmd -i hosts playbooks/installer/rdo-manager/overcloud/quickstart-main.yml
                result=$?

                if [[ $result == 0 ]]; then
                    $anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-validate.yml
                    result=$?
                fi

                if [[ $result == 0 ]]; then
                    $anscmd -i hosts playbooks/post-deploy/rdo-manager/overcloud-test.yml
                    result=$?
                fi

                infra_result=0
                $anscmd -i hosts playbooks/collect_logs.yml &> collect_logs.txt || infra_result=1
                $anscmd -i local_hosts playbooks/cleanup.yml &> cleanup.txt || infra_result=2

                if [[ "$infra_result" != "0" && "$result" = "0" ]]; then
                    # if the job/test was ok, but collect_logs/cleanup failed,
                    # print out why the job is going to be marked as failed
                    #FIXME: re-enable this when collect_logs and cleanup are passing again
                    #result=$infra_result
                    cat collect_logs.txt
                    cat cleanup.txt
                fi

                exit $result
